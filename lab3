public class Assignment3 {
	
		/**
		 * Write a method to find N numbers which are power of three. e.g. n=4,
		 * return {1,3,9,27}
		 */
		public int[] findPowerOfThree(int n) {
			int[] res = new int[100];
			res[0] = 1;
			if ( n == 0 )
			{
				return res;
			}
			for (int i = 1; i < n; i++)
			{
				res[i] = (int) Math.pow( (double)3, (double) i);
			}
			for (int i = 0; i<n; i++)
			{
				System.out.print(res[i]+" ");
			}
			
			return res;
		}
		
		
		
		

		/**
		 * Given a integer 'n', return n%count, count is the number of digits of n
		 * For example, n = 100, return 1
		 */
		public int countDigits(int n) {
			int count = 1;
			int temp = n;
			while ((temp/10) >= 1){
				count = count +1;
				temp = temp/10;
			}
			
			System.out.println(n%count);
			return n % count ;
			

					
		}
	
	

		/**
		 * Given a integer 'n', if n is odd, print n odd numbers, if n is even,
		 * print n even numbers. For example, n = 3, print 1 3 5 n = 4, print 0 2 4
		 * 6
		 */
		public void printNumbers(int n) {
		if (n%2 == 0){
			int res = 0;
			for (int i=0; i<n; i++)
			{
				
				
				System.out.print(res+" ");
				res= res+2;
			}
			
			
		}
		else{
			int res = 1;
       for (int i=0; i<n; i++)
       {
    	   
    	   System.out.print(res+" ");
    	   res= res+2;
       }
		}
		}
	

		/**
		 * Given numRows, generate the first numRows of Pascal's triangle. For
		 * example, given numRows = 5, return: [1] [1,1] [1,2,1] [1,3,3,1]
		 * [1,4,6,4,1]
		 */
		public int[][] generatePascalsTriangle(int n) {
			int[][] res = new int[100][100];
			for(int i = 0; i < n; i++)
			{
				res[i][0] = 1;
				res[i][i] = 1;
			}
			for (int i= 2;i<n ;i++){
				for(int j = 1; j < n; j++)
				{
					res[i][j] = res[i-1][j-1]+res[i-1][j];
				}
			}
			
			for(int i=0; i<n;i++){
				for (int j=0; j<i+1;j++){
					System.out.print(res[i][j]);
				}
				System.out.println();
			}
			return res;
		}

		/**
		 * Write a function that takes a string as input and reverse only the vowels
		 * of a string. For example: Given s = "hello", return "holle". aeiou
		 */
		public String reverseVowels(String s) {
			char[] vowel = new char[s.length()];
			int index =0;
			for (int i=0; i < s.length(); i++){
			if((s.charAt(i) == 'a')||(s.charAt(i) == 'e')||(s.charAt(i) == 'i')
			||(s.charAt(i) == 'o')||(s.charAt(i) == 'u')){
				vowel[index] = s.charAt(i);
				index++;
			}
			
			}
			index=0;

			for (int i=s.length()-1; i>=0; i--)
			{
				if((s.charAt(i) == 'a')||(s.charAt(i) == 'e')||(s.charAt(i) == 'i')
						||(s.charAt(i) == 'o')||(s.charAt(i) == 'u')){
							s= s.substring(0, i) + vowel[index] + s.substring(i+1);
							index++;
						}
			}
			System.out.println(s);
			return s;
		}
		

		/**
		 * Given a string s consists of upper/lower-case alphabets and empty space
		 * characters ' ', return the length of last word in the string. If the last
		 * word does not exist, return 0. Note: A word is defined as a character
		 * sequence consists of non-space characters only.
		 */
		public int lengthOfLastWord(String str) {
			
			if (str.length() == 0 || str == " "){
				return 0;
			}
		
			else{
				String[] temp = str.split(" ");
				String str1 = temp[temp.length-1];
				
				int res = str1.length();
				 
				return res;
				
			}
		
		}
		
	

		/**
		 * Reverse a string by words. Do not use 'split' function. e.g. "I like
		 * soccer" --> "soccer like I"
		 */
		public String reverseString2(String str) {
			
			int index2 = 0;
			String[] str2 = new String[str.length()];
			while (str.indexOf(' ') != -1){
				
				int index = str.indexOf(' ');
				String str1 = str.substring(0,index);

			    str = str.substring(index+1);

			    str2[index2] = str1;
				index2++;
			
			}
			str2[index2] = str;
			String res ="";
			for (int i=index2; i>=0;i--){
				res =res + str2[i]+ " ";
			}

			System.out.print(res);
			return res;
		}

		// Bonus
		/**
		 * A robot from Mars send a long message to Earth which only contains many
		 * "SOS", like "SOSSOS", "SOSSOSSOSSOSSOS" But the radiation from universe
		 * changed some characters of the massage. Write a method to count how many
		 * characters were changed. For example, "SOSSOSSOS" might be changed to
		 * "SOSSUSSOP", then your method should return 2. The message was consisted
		 * by "SOS" so its length will be multiple of 3. You could assume the
		 * message only contains upper letter.
		 */
		public int checkMessage(String message) {
			int count = 0;
			
			for(int i = 0; i < message.length(); i+=3)
			{
				if (message.charAt(i) != 'S'){
					count++;
				}
				if(message.charAt(i+1) != 'O'){
					count++;
				}
				if(message.charAt(i+2) != 'S'){
					count++;
				}
				
			}
			
			return count;
		}
		

}